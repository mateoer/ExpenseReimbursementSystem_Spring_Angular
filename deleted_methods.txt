	public Map<User,List<Reimbursement>> viewReimbursements ();
	public List<Reimbursement> filterReimbursementsByStatus (ReiStatus status);
	public List<Reimbursement> filterReimbursementsByType (ReiType reiType);
	
	// viewReimbursements
	@GetMapping("/viewreimbursements")
	public Map<User, List<Reimbursement>> viewReimbursements() {
		System.out.println("\nReimbursement map retrieved\n");
		return mangService.viewReimbursements();
	}
	
	@Override
	public Map<User, List<Reimbursement>> viewReimbursements() {
		List<Reimbursement> reiList = new ArrayList<>();
		reiList = getAllReimbursements();
		
		List<User> userList = new ArrayList<>();
		userList = getAllUsers();
		
		Map<User, List<Reimbursement>> tableMap = new HashMap<User, List<Reimbursement>>();
		
		for (User user : userList) {
			
			List<Reimbursement> tempList = new ArrayList<>();
			
			for (Reimbursement rei : reiList) {
				
				if (user.getUserId() == rei.getReiAuthor()) {
					tempList.add(rei);
				}
				
			}
			
			if (!(tempList.isEmpty())) {
				tableMap.put(user, tempList);
				
			}
			
		}
//		System.out.println("In the Manager Service");
		
		return tableMap;
	}
	
	public List<Reimbursement> getAllReimbursements() {
		return reiRepo.findAll();
	}
	public List<User> getAllUsers() {
		return userRepo.findAll();
	}
	
	@Override
	public List<Reimbursement> filterReimbursementsByStatus(ReiStatus status) {
		return reiRepo.findByReiStatus(status);
	}

	@Override
	public List<Reimbursement> filterReimbursementsByType(ReiType reiType) {		
		return reiRepo.findByReiType(reiType);
	}
	
	
	/////////////////////////////////////////////////////
	////////////TESTS////////////////////////////////////
	/////////////////////////////////////////////////////
	
	@Test
	void filterReimbursementByStatusTest() {
		// ARRANGE
		List<Reimbursement> initialReiList = new ArrayList<>();
		initialReiList.add(new Reimbursement(20, "ice cream", ReiStatus.APPROVED, ReiType.FOOD));
		initialReiList.add(new Reimbursement(30, "gas", ReiStatus.DENIED, ReiType.GAS));
		initialReiList.add(new Reimbursement(12, "ticket", ReiStatus.PENDING, ReiType.OTHER));
		initialReiList.add(new Reimbursement(12, "ticket", ReiStatus.APPROVED, ReiType.OTHER));
		initialReiList.add(new Reimbursement(60, "hostel", ReiStatus.PENDING, ReiType.LODGING));
		initialReiList.add(new Reimbursement(20, "ppv fee", ReiStatus.PENDING, ReiType.LODGING));

		
		//NOTE: TO use stream on an collection the stream must be specified at the declaration,
		//otherwise it will not work
		//ie List<Reimbursement> expectedReiList = new ArrayList<>();
		//    expectedReiList = initialReilist.stream()....     //this doesn't work
		List<Reimbursement> expectedReiList = initialReiList.stream()
				.filter(e -> e.getReiStatus().equals(ReiStatus.PENDING)).collect(Collectors.toList());

		when(reiRepo.findByReiStatus(ReiStatus.PENDING)).thenReturn(expectedReiList);

		// ACT
		List<Reimbursement> actualReiList = mangService.filterReimbursementsByStatus(ReiStatus.PENDING);

		// ASSERT
		verify(reiRepo, times(1)).findByReiStatus(ReiStatus.PENDING);
		assertNotEquals(initialReiList, actualReiList);
		assertEquals(expectedReiList, actualReiList);

		System.out.println("Initial");
		for (Reimbursement reimbursement : initialReiList) {
			System.out.println("ID: " + reimbursement.getReiId() + "\tStatus: " + reimbursement.getReiStatus());
		}
		System.out.println("Expected");
		for (Reimbursement reimbursement : expectedReiList) {
			System.out.println("ID: " + reimbursement.getReiId() + "\tStatus: " + reimbursement.getReiStatus());
		}
		System.out.println("Actual");
		for (Reimbursement reimbursement : actualReiList) {
			System.out.println("ID: " + reimbursement.getReiId() + "\tStatus: " + reimbursement.getReiStatus());
		}
	}

	@Test
	void filterReimbursementByTypeTest() {
		
		// ARRANGE
		List<Reimbursement> initialReiList = new ArrayList<>();
		initialReiList.add(new Reimbursement(20, "ice cream", ReiStatus.APPROVED, ReiType.FOOD));
		initialReiList.add(new Reimbursement(30, "gas", ReiStatus.DENIED, ReiType.GAS));
		initialReiList.add(new Reimbursement(12, "ticket", ReiStatus.PENDING, ReiType.OTHER));
		initialReiList.add(new Reimbursement(12, "ticket", ReiStatus.APPROVED, ReiType.OTHER));
		initialReiList.add(new Reimbursement(60, "hostel", ReiStatus.PENDING, ReiType.LODGING));
		initialReiList.add(new Reimbursement(20, "ppv fee", ReiStatus.PENDING, ReiType.LODGING));

		List<Reimbursement> expectedReiList = initialReiList.stream()
				.filter(e -> e.getReiType().equals(ReiType.LODGING)).collect(Collectors.toList());

		when(reiRepo.findByReiType(ReiType.LODGING)).thenReturn(expectedReiList);

		// ACT
		List<Reimbursement> actualReiList = mangService.filterReimbursementsByType(ReiType.LODGING);

		// ASSERT
		verify(reiRepo, times(1)).findByReiType(ReiType.LODGING);
		assertNotEquals(initialReiList, actualReiList);
		assertEquals(expectedReiList, actualReiList);

		System.out.println("Initial");
		for (Reimbursement reimbursement : initialReiList) {
			System.out.println("ID: " + reimbursement.getReiId() + "\tStatus: " + reimbursement.getReiType());
		}
		System.out.println("Expected");
		for (Reimbursement reimbursement : expectedReiList) {
			System.out.println("ID: " + reimbursement.getReiId() + "\tStatus: " + reimbursement.getReiType());
		}
		System.out.println("Actual");
		for (Reimbursement reimbursement : actualReiList) {
			System.out.println("ID: " + reimbursement.getReiId() + "\tStatus: " + reimbursement.getReiType());
		}
	}
	
	@Test
	void viewReimbursementsTest() {
		// ARRANGE
		User user1 = new User("suechan");
		User user2 = new User("mateoer");
		List<User> userList = new ArrayList<>();
		userList.add(user1);
		userList.add(user2);
		
		
		List<Reimbursement> initialReiList1 = new ArrayList<>();
		initialReiList1.add(new Reimbursement(20, "ice cream", user1.getUserId()));
		initialReiList1.add(new Reimbursement(30, "gas", user1.getUserId()));
		initialReiList1.add(new Reimbursement(12, "ticket", user1.getUserId()));
		user1.setReimbursements(initialReiList1);
		
		List<Reimbursement> initialReiList2 = new ArrayList<>();
		initialReiList2.add(new Reimbursement(60, "hostel", user2.getUserId()));
		initialReiList2.add(new Reimbursement(20, "ppv fee", user2.getUserId()));
		user2.setReimbursements(initialReiList2);

		List<Reimbursement> expectedReiList = new ArrayList<>();
		expectedReiList.addAll(initialReiList1);
		expectedReiList.addAll(initialReiList2);
		
		Map<User, List<Reimbursement>> expectedReiMap = new HashMap<>();
		expectedReiMap.put(user1, initialReiList1);
		expectedReiMap.put(user2, initialReiList2);

		when(reiRepo.findAll()).thenReturn(expectedReiList);
		when(userRepo.findAll()).thenReturn(userList);

		// ACT
		Map<User, List<Reimbursement>> actualReiMap = mangService.viewReimbursements();
		
		
		
		// ASSERT
		verify(reiRepo, times(1)).findAll();
		verify(userRepo, times(1)).findAll();
		assertAll(
				()->	assertThat(expectedReiMap.size()== actualReiMap.size()),
				()->	assertThat(expectedReiMap.entrySet().equals(actualReiMap.entrySet())),			
				()->	assertThat(expectedReiMap.equals(actualReiMap))				
				
				//NOTE: assertEquals doesn't work well with maps of lists apparently
				//this assertion will fail even though the one above passes
//				()-> 	assertEquals(expectedReiMap, actualReiMap)
					);		
	}
	
	@Test
	void filterByStatusTest() {
		// ARRANGE
		List<Reimbursement> initialReiList = new ArrayList<>();
		initialReiList.add(new Reimbursement(20, "ice cream", ReiStatus.APPROVED, ReiType.FOOD));
		initialReiList.add(new Reimbursement(30, "gas", ReiStatus.DENIED, ReiType.GAS));
		initialReiList.add(new Reimbursement(12, "ticket", ReiStatus.PENDING, ReiType.OTHER));
		initialReiList.add(new Reimbursement(12, "ticket", ReiStatus.APPROVED, ReiType.OTHER));
		initialReiList.add(new Reimbursement(60, "hostel", ReiStatus.PENDING, ReiType.LODGING));
		initialReiList.add(new Reimbursement(20, "ppv fee", ReiStatus.PENDING, ReiType.LODGING));

		// NOTE: TO use stream on an collection the stream must be specified at the
		// declaration,
		// otherwise it will not work
		// ie List<Reimbursement> expectedReiList = new ArrayList<>();
		// expectedReiList = initialReilist.stream().... //this doesn't work
		List<Reimbursement> expectedReiList = initialReiList.stream()
				.filter(e -> e.getReiStatus().equals(ReiStatus.PENDING)).collect(Collectors.toList());

		when(mangService.filterReimbursementsByStatus(ReiStatus.PENDING)).thenReturn(expectedReiList);

		// ACT
		List<Reimbursement> actualReiList = mangController.filterByStatus(ReiStatus.PENDING);

		// ASSERT
		verify(mangService, times(1)).filterReimbursementsByStatus(ReiStatus.PENDING);
		assertNotEquals(initialReiList, actualReiList);
		assertEquals(expectedReiList, actualReiList);

		System.out.println("Initial");
		for (Reimbursement reimbursement : initialReiList) {
			System.out.println("ID: " + reimbursement.getReiId() + "\tStatus: " + reimbursement.getReiStatus());
		}
		System.out.println("Expected");
		for (Reimbursement reimbursement : expectedReiList) {
			System.out.println("ID: " + reimbursement.getReiId() + "\tStatus: " + reimbursement.getReiStatus());
		}
		System.out.println("Actual");
		for (Reimbursement reimbursement : actualReiList) {
			System.out.println("ID: " + reimbursement.getReiId() + "\tStatus: " + reimbursement.getReiStatus());
		}
	}

	
	@Test
	void filterByTypeTest() {
		// ARRANGE
		List<Reimbursement> initialReiList = new ArrayList<>();
		initialReiList.add(new Reimbursement(20, "ice cream", ReiStatus.APPROVED, ReiType.FOOD));
		initialReiList.add(new Reimbursement(30, "gas", ReiStatus.DENIED, ReiType.GAS));
		initialReiList.add(new Reimbursement(12, "ticket", ReiStatus.PENDING, ReiType.OTHER));
		initialReiList.add(new Reimbursement(12, "ticket", ReiStatus.APPROVED, ReiType.OTHER));
		initialReiList.add(new Reimbursement(60, "hostel", ReiStatus.PENDING, ReiType.LODGING));
		initialReiList.add(new Reimbursement(20, "ppv fee", ReiStatus.PENDING, ReiType.LODGING));

		List<Reimbursement> expectedReiList = initialReiList.stream()
				.filter(e -> e.getReiType().equals(ReiType.LODGING)).collect(Collectors.toList());

		when(mangService.filterReimbursementsByType(ReiType.LODGING)).thenReturn(expectedReiList);

		// ACT
		List<Reimbursement> actualReiList = mangController.filterByType(ReiType.LODGING);

		// ASSERT
		verify(mangService, times(1)).filterReimbursementsByType(ReiType.LODGING);
		assertNotEquals(initialReiList, actualReiList);
		assertEquals(expectedReiList, actualReiList);

		System.out.println("Initial");
		for (Reimbursement reimbursement : initialReiList) {
			System.out.println("ID: " + reimbursement.getReiId() + "\tStatus: " + reimbursement.getReiType());
		}
		System.out.println("Expected");
		for (Reimbursement reimbursement : expectedReiList) {
			System.out.println("ID: " + reimbursement.getReiId() + "\tStatus: " + reimbursement.getReiType());
		}
		System.out.println("Actual");
		for (Reimbursement reimbursement : actualReiList) {
			System.out.println("ID: " + reimbursement.getReiId() + "\tStatus: " + reimbursement.getReiType());
		}
	}
	
	@Test
	void viewReimbursementsTest() {
		// ARRANGE
				User user1 = new User("suechan");
				User user2 = new User("mateoer");
				List<User> userList = new ArrayList<>();
				userList.add(user1);
				userList.add(user2);
				
				
				List<Reimbursement> initialReiList1 = new ArrayList<>();
				initialReiList1.add(new Reimbursement(20, "ice cream", user1.getUserId()));
				initialReiList1.add(new Reimbursement(30, "gas", user1.getUserId()));
				initialReiList1.add(new Reimbursement(12, "ticket", user1.getUserId()));
				user1.setReimbursements(initialReiList1);
				
				List<Reimbursement> initialReiList2 = new ArrayList<>();
				initialReiList2.add(new Reimbursement(60, "hostel", user2.getUserId()));
				initialReiList2.add(new Reimbursement(20, "ppv fee", user2.getUserId()));
				user2.setReimbursements(initialReiList2);

				List<Reimbursement> expectedReiList = new ArrayList<>();
				expectedReiList.addAll(initialReiList1);
				expectedReiList.addAll(initialReiList2);
				
				Map<User, List<Reimbursement>> expectedReiMap = new HashMap<>();
				expectedReiMap.put(user1, initialReiList1);
				expectedReiMap.put(user2, initialReiList2);

//				when(reiRepo.findAll()).thenReturn(expectedReiList);
//				when(userRepo.findAll()).thenReturn(userList);

				// ACT
				Map<User, List<Reimbursement>> actualReiMap = mangController.viewReimbursements();
				
				
				
				// ASSERT
//				verify(reiRepo, times(1)).findAll();
//				verify(userRepo, times(1)).findAll();
				assertAll(
						()->	assertThat(expectedReiMap.size()== actualReiMap.size()),
						()->	assertThat(expectedReiMap.entrySet().equals(actualReiMap.entrySet())),			
						()->	assertThat(expectedReiMap.equals(actualReiMap))				
						
						//NOTE: assertEquals doesn't work well with maps of lists apparently
						//this assertion will fail even though the one above passes
//						()-> 	assertEquals(expectedReiMap, actualReiMap)
							);
	}

	
	
	
	